// initialise variables
int press = 0;
int distance = 0;
string state = "State_One";

task main ()                    
{
    // initialize sensors (i.e. ultrasonic for 1 and touch for 2)
 SetSensorType(IN_1, SENSOR_TYPE_LOWSPEED_9V);
 SetSensor(IN_2,SENSOR_TOUCH);
}

task Monitor ()
{
    // monitors sensors and updates variables
 Follows(main); // runs simultaneously with FSM
 while (true)
 {
    // constantly running, updating variables
  press = SENSOR_2;
  distance = SensorUS(IN_1);
  ClearScreen();
  NumOut(20, 8, press);       // displays data for debugging
  NumOut(20, 24, distance);   //          ''
  TextOut(20, 40, state);     //          ''
  Wait(185);
 }
}


task FSM ()
{
 Follows(main); // runs simultaneously with Monitor, main logical structure
 while (true)
 {
  switch (state)    // finite state machine time
  {

   case "State_One":
    // inactive
    Wait(200);
    
    if (press == 0) {
     state = "State_One";   // should happen always if not pressing
    } else if ((press == 1) && (distance > 20)) {
     state = "State_Two";   // should happen if pressing and far from obstacle
    } else if ((press == 1) && (distance <= 20)) {
     state = "State_Three"; // should happen if pressing and close to obstacle
    }
    break;

   case "State_Two":
    // forwards
    RotateMotor(OUT_A, 45, 540);    // walk forwards 1 step

    // if statement same as above
    if (press == 0) {
     state = "State_One";
    } else if ((press == 1) && (distance > 20)) {
     state = "State_Two";
    } else if ((press == 1) && (distance <= 20)) {
     state = "State_Three";
    }
    break;

   case "State_Three":
   // backwards
    RotateMotor(OUT_A, -45, 540);   // walk backwards 1 step

    // if statement same as above
    if (press == 0) {
     state = "State_One";
    } else if ((press == 1) && (distance > 20)) {
     state = "State_Two";
    } else if ((press == 1) && distance <= 20) {
     state = "State_Three";
    }
    break;
  }
 }
}